import math
from spacecraft_model import atmosphere_model
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from numba import jit
from scipy.stats import pearsonr

# Constants
C = 100  # example constant value, should be updated based on the geometry and flow regime
STAG_K = 1.83e-4 # Stagnation point heat transfer coefficient (W/m^2-K^0.5)
RATIO_OF_SPECIFIC_HEATS = 1.4
AIR_GAS_CONSTANT = 287.058
# assumptions
K_REF = 0.02476 # W/m·K (reference thermal conductivity at 15ºC or 288.15K)
T_REF = 288.15 # K (reference temperature)
S = 110.4 # K (Sutherland's constant)
RHO_REF = 1.225 # kg/m³ (reference density at 15ºC or 288.15K)
STEFAN_BOLTZMANN_CONSTANT = 5.670374419e-8 # W/m²·K⁴ (Stefan-Boltzmann constant)

# materials with name, lorentz number, density, specific heat, melting point, and emissivity
MATERIALS = {
    "Aluminum": {
        'thermal_conductivity': 171, # W/m*K
        'specific_heat_capacity': 94, # 0.94 kJ/kg*K
        'emissivity': 0.1,
        'ablation_efficiency': 0.1 # (assumed)
    },
    "Copper": {
        'thermal_conductivity': 390, # W/m*K
        'specific_heat_capacity': 39, # 0.39 kJ/kg*K
        'emissivity': 0.03,
        'ablation_efficiency': 0.1 # (assumed)
    },
    'PICA': {
        'thermal_conductivity': 0.5, # W/m*K
        'specific_heat_capacity': 2000, # 0.094 kJ/kg*K
        'emissivity': 0.9,
        'ablation_efficiency': 0.7 # (assumed)
    },
    "RCC": {
        'thermal_conductivity': 7.64, # W/m*K
        'specific_heat_capacity': 1670, # 1.67 kJ/kg*K
        'emissivity': 0.5,
        'ablation_efficiency': 0.99 # completely ablates (assumed)
    },
    "Cork": {
        'thermal_conductivity': 0.043, # W/m*K
        'specific_heat_capacity': 2010, # 2.01 kJ/kg*K
        'emissivity': 0.7,
        'ablation_efficiency': 0.3 # (assumed)
    },
    "InconelX": {
        'thermal_conductivity': 35.3, # W/m*K
        'specific_heat_capacity': 0.54 * 1000, # 0.54 kJ/kg*K
        'emissivity': 0.2,
        'ablation_efficiency': 0.1 # (assumed)
    },
    "Alumina enhanced thermal barrier rigid tile": {
        'thermal_conductivity': 0.064, # W/m*K
        'specific_heat_capacity': 0.63 * 1000, # 0.94 kJ/kg*K
        'emissivity': 0.9,
        'ablation_efficiency': 0.7 # (assumed)
    },
}


def spacecraft_temperature(v_norm, atmo_T, a_drag, capsule_length, material_properties, t_span, spacecraft_m=500):
    thermal_conductivity = material_properties[0]
    specific_heat_capacity = material_properties[1]
    emissivity = material_properties[2]
    ablation_efficiency = material_properties[3]
    t_span = int(t_span / 6)
    T_s = atmo_T
    iterations = t_span
    for _ in range(iterations):
        # Calculate drag force from the acceleration due to drag
        drag_force = spacecraft_m * a_drag

        # Calculate work done (W) using the drag force and change in velocity (dv)
        W = drag_force * v_norm

        # Calculate the heat generated (Q) from the work done (W) and the ablation efficiency factor
        Q = ablation_efficiency * W

        # Calculate the convective heat transfer (Qc) using the thermal conductivity of the heat shield material
        Qc = thermal_conductivity * (T_s - atmo_T) / capsule_length

        # Calculate radiative heat transfer (Qr) using the emissivity of the heat shield material and the Stefan-Boltzmann constant (sigma)
        Qr = emissivity * STEFAN_BOLTZMANN_CONSTANT * (T_s**4 - atmo_T**4)

        # Calculate the net heat transfer (Q_net) by adding the convective and radiative heat transfer terms
        Q_net = Q - Qc - Qr

        # Calculate the temperature change (dT) from the net heat transfer (Q_net) using the specific heat capacity of the heat shield material
        dT = Q_net / (spacecraft_m * specific_heat_capacity)

        # Update the spacecraft temperature (T_s) by adding the temperature change (dT) to the current temperature
        T_s += dT

    return Q, Qc, Qr, Q_net, dT, T_s



Cd = 0.5 # (drag coefficient)
spacecraft_area = 1 # m² (reference area)
Rn = 2.2  # capsule's nose radius, m (example value, should be updated based on the actual capsule)
epoch_jd = 2459270.5
altitude = 100000  # altitude, m (example value, should be updated based on the actual altitude)
v_norm = 7500  # capsule's velocity, m/s (example value, should be updated based on the actual velocity)
v_norms = [ 7550.000000000001, 7552.957407020953, 7555.9343077881995, 7558.930381003318, 7561.94530166822, 7564.978740796817, 7568.030366677465, 7571.099844136846, 7574.186833624009, 7577.290992352022, 7580.411973858251, 7583.5494285971445, 7586.70300387301, 7589.872342813137, 7593.05708520968, 7596.256866949609, 7599.471320701081, 7602.700076676608, 7605.942761605092, 7609.198997659809, 7612.468403621835, 7615.75059547143, 7619.045184947691, 7622.351781960313, 7625.66999356246, 7628.999422848751, 7632.3396678231065, 7635.690324775882, 7639.0509863423795, 7642.421241455409, 7645.800677600108, 7649.188879707445, 7652.585428993013, 7655.98990174301, 7659.401870620896, 7662.820908504963, 7666.246581987683, 7669.678456828835, 7673.1160971931695, 7676.5590644542835, 7680.006915938235, 7683.45920360888, 7686.91547843963, 7690.37529032352, 7693.838183629582, 7697.3037026740985, 7700.771390542652, 7704.240787825427, 7707.71143128485, 7711.1828524575985, 7714.654581385796, 7718.126149835731, 7721.597082603363, 7725.066905142093, 7728.535142533889, 7732.001318184575, 7735.4649524422075, 7738.925561140651, 7742.382655731322, 7745.835753704531, 7749.28436510968, 7752.727999757894, 7756.166168361091, 7759.5983812227, 7763.024146840539, 7766.442970423985, 7769.854352327709, 7773.257794102315, 7776.652800494163, 7780.038869733852, 7783.415502382495, 7786.782200149707, 7790.13846451839, 7793.483795271564, 7796.817688923484, 7800.139637782169, 7803.449142279776, 7806.745698479762, 7810.02880194087, 7813.297950995374, 7816.552645430937, 7819.792385061463, 7823.0166681891205, 7826.224989959851, 7829.416845706077, 7832.591739073767, 7835.749167741586, 7838.888632993318, 7842.009639122474, 7845.1116920733475, 7848.194297959963, 7851.2569614651275, 7854.299185091636, 7857.320480958202, 7860.32035888209, 7863.29833067929, 7866.253912429046, 7869.186623197719, 7872.095983627695, 7874.981514393426, 7877.842734803511, 7880.679172517356, 7883.490356636651, 7886.27581802008, 7889.035092655327, 7891.767720461214, 7894.473243942932, 7897.15120670237, 7899.801152583595, 7902.422634937841, 7905.015208332767, 7907.578431453766, 7910.111868574024, 7912.615088411121, 7915.087662826035, 7917.529165366428, 7919.939173841129, 7922.317274789568, 7924.663056573948, 7926.976113933172, 7929.256047147522, 7931.502460904624, 7933.714962998828, 7935.893164491159, 7938.036685903541, 7940.145151948029, 7942.218190399004, 7944.255431373082, 7946.256506304419, 7948.2210467521, 7950.14867486923, 7952.039018120914, 7953.891676725973, 7955.706199007808, 7957.482080327114, 7959.218732845794, 7960.91544196755, 7962.571377360174, 7964.185273673748, 7965.755403068377, 7967.279566566136, 7968.754691328603, 7970.176756983083, 7971.53992618971, 7972.836195189355, 7974.055211803921, 7975.183181279918, 7976.201984284157, 7977.087737449372, 7977.81041127211, 7978.3323041678705, 7978.606649973548, 7978.575841786176, 7978.17107633748, 7977.310980943676, 7975.90075368864, 7973.83137262235, 7970.979857816357, 7967.209651412987, 7962.370611979311, 7956.3004144120105, 7948.824931035436, 7939.758943451708, 7928.905982082782, 7916.057183989219, 7900.988132209382, 7883.453976554628, 7863.180534914868, 7839.852607961707, 7813.094951401403, 7782.448049983766, 7747.33240207815, 7706.998808899662, 7660.458961505405, 7606.384791163614, 7542.961679978129, 7467.670297230697, 7376.957431385053, 7265.7338830708195, 7126.607425088317, 6948.731060392313, 6716.170861601647, 6405.945555629458, 5986.869460700207, 5423.032319557834, 4690.327643516502, 3812.681117866213, 2894.0187913051536, 2135.2653665842195, 1658.4034995851266, 1345.8969816268204, 1131.9537803141423, 980.7776877441663, 871.4198271631248, 791.3496243783334, 731.4471995802014, 685.6226720745168, 649.9442774480955, 621.9038799406962, 604.124253044884, 594.6710695533484, 579.4231096401717, 560.3597937229304, 540.086560626671, 520.7602321390406, 504.0726094518936, 490.902188915202, 480.60402096955505, 472.5187561466363, 466.0998809342676, 460.9374007518058, 456.85898890727805, 453.55794383651926, 450.80342248565944, 448.45824462761993, 446.43262900271424, 444.6966219389621, 443.6194137980432, 442.89312623032345, 442.3294311584025, 441.8740090202768, 441.504309329804, 441.20715028556793, 440.9733382079675, 440.7960508088631 ]
altitudes = [ 489349.9294179855, 486707.30041773524, 484049.4174452312, 481376.5906496644, 478689.1323612761, 475987.3573053228, 473271.58287790883, 470542.1286884751, 467799.3160200855, 465043.4684430687, 462274.9119958542, 459493.9750960646, 456700.9883725401, 453896.2840890363, 451080.19643529877, 448253.0618601255, 445415.2191245062, 442567.00937286485, 439708.7755695209, 436840.8618757967, 433963.61404396314, 431077.38041581307, 428182.5111322198, 425279.3587732073, 422368.27780704387, 419449.6239670981, 416523.753573996, 413591.0249784086, 410651.7987431381, 407706.43709091004, 404755.3045172114, 401798.7672071755, 398837.1923870975, 395870.9476112239, 392900.4011219414, 389925.92441930063, 386947.88965562824, 383966.6711597061, 380982.6450039884, 377996.1883639656, 375007.67880895175, 372017.49352494907, 369026.0110386647, 366033.6125733685, 363040.67969667073, 360047.5959441513, 357054.7462279154, 354062.5161655415, 351071.29133653454, 348081.4564670259, 345093.39677520376, 342107.50073448196, 339124.15630354825, 336143.75311702024, 333166.6819611611, 330193.33409989905, 327224.10052384436, 324259.37112307176, 321299.53444487695, 318344.98266381025, 315396.1072968822, 312453.300645289, 309516.95602278784, 306587.4671056587, 303665.22720070556, 300750.62843198143, 297844.06084699277, 294945.91465470754, 292056.5828048587, 289176.4565874934, 286305.92813386954, 283445.3898471063, 280595.2337123016, 277755.85051999893, 274927.62900376134, 272110.9551648153, 269306.2175154956, 266513.80387457274, 263734.10128984414, 260967.49691912904, 258214.37739866786, 255475.12811940536, 252750.1324118739, 250039.77064039186, 247344.42122785654, 244664.46524862945, 242000.28098906577, 239352.24632654618, 236720.73837793618, 234106.13283502962, 231508.8032031739, 228929.1199437501, 226367.4498801576, 223824.16118537728, 221299.62019561883, 218794.19153314177, 216308.23864909634, 213842.1232134672, 211396.20440309308, 208970.83808841184, 206566.37601855118, 204183.16964584496, 201821.5689862715, 199481.9214713052, 197164.57278347109, 194869.8662853539, 192598.14234203566, 190349.73753758334, 188124.9840693837, 185924.2135770982, 183747.75506899506, 181595.93479846139, 179469.07654792815, 177367.5010713786, 175291.52542618196, 173241.46219487675, 171217.6202484863, 169220.3073699344, 167249.82741789054, 165306.4813484205, 163390.56679329183, 161502.3774802955, 159642.20253943, 157810.32658360153, 156007.03234771173, 154232.59847107343, 152487.3000988569, 150771.4085683236, 149085.19087294117, 147428.9090090245, 145802.82089161593, 144207.1813534135, 142642.2407855373, 141108.2454726426, 139605.43703559972, 138134.0520710023, 136694.32301775366, 135286.47740883846, 133910.7386632273, 132567.32513446175, 131256.4488946963, 129978.316486164, 128733.12703828141, 127521.07402845286, 126342.34283045772, 125197.1070430195, 124085.52757572383, 123007.75016464293, 121963.90412439499, 120954.0911301747, 119978.37933149189, 119036.79776560888, 118129.33067444153, 117255.88919444568, 116416.30276836827, 115610.3050548425, 114837.50643623807, 114097.35960736964, 113389.14243842661, 112711.91735750437, 112064.49378299993, 111445.39382868446, 110852.80310697667, 110284.53329086583, 109737.97008004505, 109210.03091102373, 108697.10972719546, 108195.02949496638, 107698.98205540702, 107203.46817953326, 106702.22673311085, 106188.15017503686, 105653.18625639938, 105088.21427271608, 104482.89144588541, 103825.46107449941, 103102.51484260801, 102298.7038301779, 101396.40519661736, 100375.38118816167, 99212.53896370158, 97882.06686235778, 96356.58770798147, 94610.64143019635, 92628.75266521983, 90420.21310281195, 88037.20029881969, 85578.40251840558, 83139.60855550598, 80654.17036889028, 78034.17533638794, 75246.91924166866, 72289.46170758177, 69177.56180866901, 65936.31086302549, 62597.36408098042, 59198.05071276054, 55775.352230052464, 52360.08534098137, 48964.69773333147, 45495.989175434224, 42030.36807549093, 38685.24252682645, 35539.43536363449, 32634.12247611396, 29978.52401885111, 27550.12441514712, 25317.948043443263, 23254.741407217458, 21337.68927649781, 19548.031701478176, 17868.33598397486, 16282.226866235025, 14777.836060887203, 13346.091898115352, 11979.642028130591, 10672.231984262355, 9410.220208862796, 8175.853626059368, 6961.34206077829, 5762.313525008038, 4575.4888457767665, 3398.106261553243, 2227.738181562163, 1062.20444550924 ]
drag_accelerations = [ 6.729876292145811e-12, 6.735672195723054e-12, 6.741512517185272e-12, 6.747396668983334e-12, 6.753324053690125e-12, 6.759294063372597e-12, 6.76530608192973e-12, 6.77135948373161e-12, 6.777453631922055e-12, 6.783587880446567e-12, 6.789761573155414e-12, 6.795974044934575e-12, 6.80222462157552e-12, 6.808512617875212e-12, 6.8148373391593e-12, 6.821198080097482e-12, 6.827594126003131e-12, 6.834024754266626e-12, 6.840489232456093e-12, 6.846986816336438e-12, 6.853516751997786e-12, 6.860078276787715e-12, 6.866670616689655e-12, 6.873292990840224e-12, 6.879944609634782e-12, 6.88662467269386e-12, 6.893332366773092e-12, 6.900066871983118e-12, 6.906827358006159e-12, 6.913612984125534e-12, 6.920422903466206e-12, 6.927256260956727e-12, 6.934112191188898e-12, 6.940989816178206e-12, 6.9478882478001075e-12, 6.954806594743241e-12, 6.961743950436543e-12, 6.968699403347284e-12, 6.975672035590356e-12, 6.982660920726782e-12, 6.989665121448611e-12, 6.996683687153623e-12, 7.003715662104121e-12, 7.010760085027524e-12, 7.017815980965249e-12, 7.024882371632392e-12, 7.031958273254948e-12, 7.039042694243566e-12, 7.046134632739014e-12, 7.053233074032888e-12, 7.06033699758673e-12, 7.067445382836619e-12, 7.074557192999572e-12, 7.081671389587063e-12, 7.088786930527097e-12, 7.095902767765786e-12, 7.103017844722346e-12, 7.110131093601063e-12, 7.1172414356935495e-12, 7.124347800887532e-12, 7.131449102155386e-12, 7.13854424944474e-12, 7.1456321519102215e-12, 7.15271171550312e-12, 7.159781840391061e-12, 7.166841418210557e-12, 7.173889329155188e-12, 7.180924453444505e-12, 7.187945674831349e-12, 7.194951862386089e-12, 7.201941887431044e-12, 7.208914621314305e-12, 7.215868932794995e-12, 7.222803685214215e-12, 7.229717733447743e-12, 7.236609922014006e-12, 7.243479108222566e-12, 7.250324137926635e-12, 7.257143852828095e-12, 7.263937096320095e-12, 7.270702710384154e-12, 7.277439532082631e-12, 7.284146389599335e-12, 7.290822097768358e-12, 7.297465462726137e-12, 7.304075294957783e-12, 7.310650379259718e-12, 7.317189489677906e-12, 7.323691383884507e-12, 7.330154794929287e-12, 7.336578421321473e-12, 7.342960915114208e-12, 7.349300869455365e-12, 7.355596827418122e-12, 7.361847242088896e-12, 7.368050464306866e-12, 7.374204721570644e-12, 7.380308084455638e-12, 7.386358425993099e-12, 7.392353372711003e-12, 7.398290246363061e-12, 7.404166015725533e-12, 7.409977202968441e-12, 7.415719788871191e-12, 7.421389105813786e-12, 7.426979701144912e-12, 8.40142687672635e-12, 1.711114264736015e-11, 3.4590129766038204e-11, 6.939472701804249e-11, 1.381516216367418e-10, 2.7289471330749984e-10, 5.34808686753303e-10, 1.0397305291713182e-09, 2.0050133870996503e-09, 3.834806023664178e-09, 7.273692161294119e-09, 1.3680671904452586e-08, 2.5512717686735936e-08, 4.7169210680745707e-08, 8.645077929829119e-08, 1.570520163430316e-07, 2.8277330148685304e-07, 5.045562480591679e-07, 8.920983139175201e-07, 1.5627996905253208e-06, 2.7122933529335598e-06, 4.663025406903773e-06, 7.94056702880621e-06, 1.3391911301925478e-05, 2.236636267072033e-05, 3.698826487255868e-05, 6.056228103704966e-05, 9.816662486335386e-05, 0.00015750797671305858, 0.00025013511702886096, 0.00039316703499968207, 0.0006115315537968714, 0.0009411415283863635, 0.0014329833168439943, 0.0021584134036794346, 0.0032158374009383798, 0.004738929219265113, 0.006906465765561462, 0.009953745939590808, 0.014185393622820619, 0.019989106399171674, 0.027849663071301822, 0.03836217448856307, 0.05224342918899477, 0.07033976188719232, 0.09362981150310323, 0.12322048794684978, 0.16033577133595148, 0.20629668779600235, 0.2624930196067154, 0.3303489926416022, 0.41128660040174675, 0.5066886409535563, 0.6178712140476315, 0.7460717740040186, 0.8924599338621292, 1.0581839943591143, 1.2444566110425983, 1.452694964013566, 1.684717976743984, 1.9430199138539728, 2.23112765364983, 2.554076398012078, 2.9190363919744367, 3.336164558636248, 3.819789297741918, 4.390101748472256, 5.075642732040233, 5.917037118886731, 6.9727063744701026, 8.327721742788544, 10.107612276504476, 12.499782275645213, 15.785797976700817, 20.386236829442797, 26.909240761956113, 36.15405638624888, 48.90572711030996, 65.13060427457995, 82.15873332882279, 93.07006687528131, 90.10372898437973, 61.09799575269486, 40.07360389296893, 28.153948308074188, 21.021872472651477, 16.647056841298113, 13.89129596784693, 12.21615332764827, 11.286370182935816, 10.806212030961403, 10.566838335044176, 10.432978516864187, 8.559278317059766, 9.857533885894025, 10.99719445470585, 11.750874773765172, 12.136708151051323, 12.228906269580596, 11.966566304326667, 11.656336386828714, 11.387840173143417, 11.165368457277586, 10.984088286809278, 10.816703068988273, 10.654986903899443, 10.542998422697707, 10.457704465960173, 10.38897208151533, 10.331840830779846, 10.199223607114265, 10.016924870606296, 9.949183186749563, 9.91064910806316, 9.881916317511324, 9.858077251296361, 9.83749051868077, 9.81933670237052, 9.803071254019827]
capsule_length = 2.0  # characteristic length, m (example value, should be updated based on the actual capsule)

# Initialize lists
Heat_Generated_data = []
Convective_Heat_transfered_data = []
Radiative_Heat_transfered_data = []
Net_heat_transfered_data = []
Temperature_change_data = []
Spacecraft_surface_temperature_data = []
atmo_rho_data = []
atmo_T_data = []


selected_material = MATERIALS['PICA']
material_properties = list(selected_material.values())
spacecraft_m= 1000 # kg
t_span = 10

# Example usage
for altitude, v_norm, drag_acceleration in zip(altitudes, v_norms, drag_accelerations):
    atmo_rho, atmo_T = atmosphere_model(altitude, 0, epoch_jd)
    q_gen, qc, qr, q_net, dT, T_s = spacecraft_temperature(v_norm, atmo_T, drag_acceleration,capsule_length, material_properties, spacecraft_m)
    Heat_Generated_data.append(q_gen)
    Convective_Heat_transfered_data.append(qc)
    Radiative_Heat_transfered_data.append(qr)
    Net_heat_transfered_data.append(q_net)
    Temperature_change_data.append(dT)
    Spacecraft_surface_temperature_data.append(T_s)
    atmo_rho_data.append(atmo_rho)
    atmo_T_data.append(atmo_T)

result = {
    'Spacecraft_surface_temperature': (Spacecraft_surface_temperature_data,'K', 'red'),
    'Net_heat_transfered_(Q_net)': (Net_heat_transfered_data,'W', 'orange'),
    'Heat_Generated_(Q)': (Heat_Generated_data,'W', 'red'),
    'Convective_Heat_transfered_(Qc)': (Convective_Heat_transfered_data,'W', 'blue'),
    'Radiative_Heat_transfered_(Qr)': (Radiative_Heat_transfered_data,'W', 'green'),
    'Temperature_change_(dT)': (Temperature_change_data,'K', 'purple'),
    'v_norm': (v_norms,'m/s', 'red'),
    'drag_acceleration': (drag_accelerations,'m/s²', 'blue'),
    'atmo_rho': (atmo_rho_data,'kg/m³', 'green'),
    'atmo_T': (atmo_T_data,'K', 'orange'),
}

# reverse order of altitude list
np.flip(altitudes)

total_plots = len(result)

# find the number of rows and columns from total number of subplots
num_rows = math.ceil(len(result) / 3)
num_cols = math.ceil(len(result) / 4)

# set font size for all subplots
title_size = 12
font_size = 8

# create a list of titles for each subplot
titles = [f'{key} vs. Altitude' for key in result.keys()]

# the x labels are the same for all subgraphs
xlabels = ['Altitude (m)' for i in range(total_plots)]
ylabels = [f'{key} ({unit})' for key, (value, unit, color) in result.items()]

# create a list of data to plot for each subgraph
xdata = [altitudes for i in range(total_plots)]
ydata = [value for key, (value, unit, color) in result.items()]

colors = [color for key, (value, unit, color) in result.items()]

# create a 4x3 grid of subplots
fig = make_subplots(rows=num_rows, cols=num_cols, subplot_titles=titles)



# loop over the subplots and plot the data with the titles, labels and colors
for i in range(num_rows):
    for j in range(num_cols):
        if i * num_cols + j >= total_plots:
            break
        # get the index of the subplot
        k = i * num_cols + j
        # create a line plot with the data and color
        trace = go.Scatter(x=xdata[k], y=ydata[k], mode='lines', line=dict(color=colors[k]), showlegend=False)
        # add the trace to the subplot
        fig.add_trace(trace, row=i+1, col=j+1)
        # update the x and y-axis labels
        fig.update_xaxes(title_text=xlabels[k], row=i+1, col=j+1)
        fig.update_yaxes(title_text=ylabels[k], row=i+1, col=j+1, title_font=dict(size=font_size), tickfont=dict(size=font_size))
        fig.update_annotations(font_size=title_size)

# update the layout of the figure
fig.update_layout(title_text='Spacecraft Surface Temperature vs. Altitude and Velocity', height=1200, autosize=True, template='plotly_dark', font=dict(size=title_size))

# show the figure
fig.show()

# def final_temperature(spacecraft_area, epoch_jd, altitude, v_norm, capsule_length):
#     atmo_rho, atmo_T = atmosphere_model(altitude, 0, epoch_jd)
#     # calculate mach number
#     speed_of_sound = math.sqrt(RATIO_OF_SPECIFIC_HEATS * AIR_GAS_CONSTANT * atmo_T)
#     mach_number = v_norm / speed_of_sound

#     # Calculate dynamic pressure
#     q_din = 0.5 * atmo_rho * v_norm**2 # dynamic pressure (Pa)
    
#     # Calculate specific heat
#     cp_air = 2 * q_din / (atmo_rho * mach_number**2) # J/kg·K (specific heat at constant pressure)

#     # Calculate thermal conductivity
#     k_air = K_REF * (atmo_T / T_REF)**1.5 * (T_REF + S) / (atmo_T + S)

#     # Calculate heat flux using the modified Newtonian heating model
#     q = k_air * cp_air * atmo_T * math.sqrt(atmo_rho / RHO_REF) * v_norm**3

#     # Estimate heat transfer coefficient (assuming constant value)
#     NU_REF=1.81e-5 # kg/ms (reference viscosity at 15ºC or 288.15K)
#     alpha = k_air / (atmo_rho * cp_air) # m²/s (thermal diffusivity)

#     # Calculate Reynolds and Nusselt numbers iteratively
#     nu = NU_REF * (atmo_T / T_REF)**1.5 * (T_REF + S) / (atmo_T + S) # m²/s (kinematic viscosity)
#     mu = atmo_rho * nu # kg/m·s (dynamic viscosity)
#     # Calculate Prandtl number
#     Pr = nu / alpha
#     # Calculate Reynolds and Nusselt numbers iteratively
#     max_iter=100
#     tol=1e-6
#     Re_prev = 1e5  # initial estimate of Reynolds number
#     Nu = None # initial estimate of Nusselt number
#     for _ in range(max_iter):
#         Re = (atmo_rho * v_norm * capsule_length) / mu
#         Nu = C * (Pr * Re)**0.5 * Pr**(-2/3)
#         if abs(Re - Re_prev) < tol:
#             break
#         Re_prev = Re

#     # Calculate heat transfer coefficient
#     h = (Nu * k_air) / capsule_length # W/m²·K

#     # Calculate spacecraft surface temperature
#     Ts = atmo_T + q / h

#     # Calculate heat loss due to drag
#     q_drag = 0.5 * atmo_rho * v_norm**2 * Cd * spacecraft_area

#     # Calculate final spacecraft surface temperature
#     Ts_final = Ts + q_drag / (h * spacecraft_area)

#     return Ts_final

# # Generate a large number of random input parameter values
# N_SAMPLES = 1000
# spacecraft_areas = np.random.uniform(0.5, 5, N_SAMPLES)
# epoch_jds = np.random.uniform(2459270, 2459300, N_SAMPLES)
# altitudes = np.random.uniform(0, 200000, N_SAMPLES)
# v_norms = np.random.uniform(500, 10000, N_SAMPLES)
# capsule_lengths = np.random.uniform(1, 5, N_SAMPLES)

# # Calculate the corresponding Ts_final values
# Ts_finals = [final_temperature(sa, ejd, alt, vn, cl) for sa, ejd, alt, vn, cl in zip(spacecraft_areas, epoch_jds, altitudes, v_norms, capsule_lengths)]

# # Calculate the correlation coefficients for each input parameter
# correlations = {
#     "spacecraft_area": pearsonr(spacecraft_areas, Ts_finals)[0],
#     "capsule_length": pearsonr(capsule_lengths, Ts_finals)[0],
# }

# # Print the correlations
# for factor, correlation in correlations.items():
#     print(f"{factor}: {correlation}")